"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing
if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Brokerage:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _BrokerageEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Brokerage.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    BBAE: _Brokerage.ValueType
    Chase: _Brokerage.ValueType
    DSPAC: _Brokerage.ValueType
    Fennel: _Brokerage.ValueType
    Fidelity: _Brokerage.ValueType
    Firstrade: _Brokerage.ValueType
    Public: _Brokerage.ValueType
    Robinhood: _Brokerage.ValueType
    Schwab: _Brokerage.ValueType
    SoFi: _Brokerage.ValueType
    Tornado: _Brokerage.ValueType
    Tradier: _Brokerage.ValueType
    'Fixed enum numbering for sequential consistency'
    Tastytrade: _Brokerage.ValueType
    Webull: _Brokerage.ValueType
    Vanguard: _Brokerage.ValueType
    WellsFargo: _Brokerage.ValueType

class Brokerage(_Brokerage, metaclass=_BrokerageEnumTypeWrapper):
    ...
BBAE: Brokerage.ValueType
Chase: Brokerage.ValueType
DSPAC: Brokerage.ValueType
Fennel: Brokerage.ValueType
Fidelity: Brokerage.ValueType
Firstrade: Brokerage.ValueType
Public: Brokerage.ValueType
Robinhood: Brokerage.ValueType
Schwab: Brokerage.ValueType
SoFi: Brokerage.ValueType
Tornado: Brokerage.ValueType
Tradier: Brokerage.ValueType
'Fixed enum numbering for sequential consistency'
Tastytrade: Brokerage.ValueType
Webull: Brokerage.ValueType
Vanguard: Brokerage.ValueType
WellsFargo: Brokerage.ValueType
global___Brokerage = Brokerage

class _Status:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _StatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Status.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    Success: _Status.ValueType
    Failure: _Status.ValueType

class Status(_Status, metaclass=_StatusEnumTypeWrapper):
    ...
Success: Status.ValueType
Failure: Status.ValueType
global___Status = Status

class _TransactionMethod:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _TransactionMethodEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TransactionMethod.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    Sell: _TransactionMethod.ValueType
    Buy: _TransactionMethod.ValueType

class TransactionMethod(_TransactionMethod, metaclass=_TransactionMethodEnumTypeWrapper):
    ...
Sell: TransactionMethod.ValueType
Buy: TransactionMethod.ValueType
global___TransactionMethod = TransactionMethod

@typing.final
class BaseTask(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TASK_ID_FIELD_NUMBER: builtins.int

    @property
    def task_id(self) -> global___UUID:
        ...

    def __init__(self, *, task_id: global___UUID | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['task_id', b'task_id']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['task_id', b'task_id']) -> None:
        ...
global___BaseTask = BaseTask

@typing.final
class UUID(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUE_FIELD_NUMBER: builtins.int
    value: builtins.str

    def __init__(self, *, value: builtins.str=...) -> None:
        ...

    def ClearField(self, field_name: typing.Literal['value', b'value']) -> None:
        ...
global___UUID = UUID

@typing.final
class Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    STATUS_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    status: global___Status.ValueType
    message: builtins.str

    def __init__(self, *, status: global___Status.ValueType=..., message: builtins.str=...) -> None:
        ...

    def ClearField(self, field_name: typing.Literal['message', b'message', 'status', b'status']) -> None:
        ...
global___Response = Response

@typing.final
class ActivationTask(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BASE_TASK_FIELD_NUMBER: builtins.int
    BROKERAGE_FIELD_NUMBER: builtins.int
    ACCOUNT_ID_FIELD_NUMBER: builtins.int
    CREDS_FIELD_NUMBER: builtins.int
    brokerage: global___Brokerage.ValueType

    @property
    def base_task(self) -> global___BaseTask:
        ...

    @property
    def account_id(self) -> global___UUID:
        """Fixed field numbering for uniqueness"""

    @property
    def creds(self) -> global___ActivationCreds:
        """Adjusted numbering"""

    def __init__(self, *, base_task: global___BaseTask | None=..., brokerage: global___Brokerage.ValueType=..., account_id: global___UUID | None=..., creds: global___ActivationCreds | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['account_id', b'account_id', 'base_task', b'base_task', 'creds', b'creds']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['account_id', b'account_id', 'base_task', b'base_task', 'brokerage', b'brokerage', 'creds', b'creds']) -> None:
        ...
global___ActivationTask = ActivationTask

@typing.final
class ActivationCreds(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    USERNAME_FIELD_NUMBER: builtins.int
    PASSWORD_FIELD_NUMBER: builtins.int
    EMAIL_FIELD_NUMBER: builtins.int
    ACCESS_TOKEN_FIELD_NUMBER: builtins.int
    DEVICE_ID_FIELD_NUMBER: builtins.int
    TRADING_PIN_FIELD_NUMBER: builtins.int
    OTP_FIELD_NUMBER: builtins.int
    PHONE_VERIFICATION_FIELD_NUMBER: builtins.int
    username: builtins.str
    password: builtins.str
    email: builtins.str
    access_token: builtins.str
    device_id: builtins.str
    trading_pin: builtins.str
    otp: builtins.str
    phone_verification: builtins.str

    def __init__(self, *, username: builtins.str | None=..., password: builtins.str | None=..., email: builtins.str | None=..., access_token: builtins.str | None=..., device_id: builtins.str | None=..., trading_pin: builtins.str | None=..., otp: builtins.str | None=..., phone_verification: builtins.str | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['_access_token', b'_access_token', '_device_id', b'_device_id', '_email', b'_email', '_otp', b'_otp', '_password', b'_password', '_phone_verification', b'_phone_verification', '_trading_pin', b'_trading_pin', '_username', b'_username', 'access_token', b'access_token', 'device_id', b'device_id', 'email', b'email', 'otp', b'otp', 'password', b'password', 'phone_verification', b'phone_verification', 'trading_pin', b'trading_pin', 'username', b'username']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['_access_token', b'_access_token', '_device_id', b'_device_id', '_email', b'_email', '_otp', b'_otp', '_password', b'_password', '_phone_verification', b'_phone_verification', '_trading_pin', b'_trading_pin', '_username', b'_username', 'access_token', b'access_token', 'device_id', b'device_id', 'email', b'email', 'otp', b'otp', 'password', b'password', 'phone_verification', b'phone_verification', 'trading_pin', b'trading_pin', 'username', b'username']) -> None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_access_token', b'_access_token']) -> typing.Literal['access_token'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_device_id', b'_device_id']) -> typing.Literal['device_id'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_email', b'_email']) -> typing.Literal['email'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_otp', b'_otp']) -> typing.Literal['otp'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_password', b'_password']) -> typing.Literal['password'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_phone_verification', b'_phone_verification']) -> typing.Literal['phone_verification'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_trading_pin', b'_trading_pin']) -> typing.Literal['trading_pin'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_username', b'_username']) -> typing.Literal['username'] | None:
        ...
global___ActivationCreds = ActivationCreds

@typing.final
class DeactivationTask(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BASE_TASK_FIELD_NUMBER: builtins.int
    ACCOUNT_ID_FIELD_NUMBER: builtins.int

    @property
    def base_task(self) -> global___BaseTask:
        ...

    @property
    def account_id(self) -> global___UUID:
        ...

    def __init__(self, *, base_task: global___BaseTask | None=..., account_id: global___UUID | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['account_id', b'account_id', 'base_task', b'base_task']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['account_id', b'account_id', 'base_task', b'base_task']) -> None:
        ...
global___DeactivationTask = DeactivationTask

@typing.final
class TransactionTask(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BASE_TASK_FIELD_NUMBER: builtins.int
    METHOD_FIELD_NUMBER: builtins.int
    AMOUNT_FIELD_NUMBER: builtins.int
    TICKER_FIELD_NUMBER: builtins.int
    method: global___TransactionMethod.ValueType
    amount: builtins.int
    ticker: builtins.str

    @property
    def base_task(self) -> global___BaseTask:
        ...

    def __init__(self, *, base_task: global___BaseTask | None=..., method: global___TransactionMethod.ValueType=..., amount: builtins.int=..., ticker: builtins.str=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['base_task', b'base_task']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['amount', b'amount', 'base_task', b'base_task', 'method', b'method', 'ticker', b'ticker']) -> None:
        ...
global___TransactionTask = TransactionTask